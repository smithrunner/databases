1.How do you find data that is held in two separate data tables?
    You can use join statements with different qualifiers to select
    the pieces of information you want from each table and get a combined
    table as a result.

2.Explain, in your own words, the difference between a CROSS JOIN, INNER JOIN,
LEFT OUTER JOIN, RIGHT OUTER JOIN, and FULL OUTER JOIN. Give a real world example for each.

    CROSS JOIN- in the new table created, there will be column for every possible
    combination of column names from table1 and table2.

    INNER JOIN- the joined table is full of rows that correspond to a conditional statement that
    compares one each row of table 1, to all rows of table2.

    LEFT OUTER JOIN- You first do a INNER JOIN. Then a row is added for each row of table 1
    where nothing matched the conditional statement.

    RIGHT OUTER JOIN- You first do a INNER JOIN. Then a row is added for each row of table 2
    where nothing matched the conditional statement.

    FULL OUTER JOIN- First an INNER JOIN. Then a row is added for each row of table 1 that had no
    matches. Then a new row is added for each row of table 2 that had no matches.

3.Define primary key and foreign key. Give a real world example for each.

    A primary key is a unique number given to each item in a particular table. An
    example would be how each football player on a team has a unique number on their
    jersey.
    A foreign key is how you link two tables together. Using the football example, each
    player on that team could have a foreign key relating to a table of all the football
    teams. So each player would be linked via a foreign key to their appropriate team.

4.Define aliasing.

    Defining an abbreviation to represent a table. Let's say you have a table named
    "dogs". With aliasing, you can tell SQL that "d" is now short for "dogs".

5.Change this query so that you are using aliasing:
    SELECT professor.name, compensation.salary, compensation.vacation_days
    FROM professor AS p
    JOIN compensation AS c
    ON p.id = c.professor_id;

6.Why would you use a NATURAL JOIN? Give a real world example.

    If you are going to use the column names that appear in both tables only via the USING method,
    NATURAL JOIN is a short hand to do that for you.

7.Build an Employees table and a Shifts table with appropriate primary and foreign keys. Then, write queries to find the following information:
    List all employees and all shifts.
    Create a list of all possible schedules.

    CREATE TABLE employees (
        employee_id integer,
        name text
    );

    CREATE TABLE shifts (
        id integer,
        time text,
        day text
    );

    SELECT * FROM employees NATURAL JOIN shifts;

    SELECT * FROM employees CROSS JOIN shifts;



8.Given the Dogs table (described below), the Adoptions table (described below), the Adopters table (which has the columns id,
first_name, last_name, address, and phone number), and the Volunteers table (which has the columns id,
name, address, phone_number, available_to_foster, and foster_id), please write queries to retrieve the following information.
    Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

        SELECT * FROM volunteers
        LEFT JOIN adopters
        ON volunteers.id = adopters.id;

    List the adopter’s name and the pet’s name for each animal adopted within the past month to be displayed as a ‘Happy Tail’ on social media.

        SELECT name, pet_name FROM Adoptions
        WHERE date > 12/9/2017;

    Create a list of adopters who have not yet chosen a dog to adopt and generate all possible combinations of adopters and available dogs.

        SELECT * FROM adopters
        WHERE dog = null;


    Display a list of all cats and all dogs who have not been adopted.

        SELECT name FROM dogs
        WHERE adopter = false;

    Create a list of volunteers who are available to foster. If they currently are fostering a dog, include the dog.
    Also include all dogs who are not currently in foster homes.

        SELECT volunteer_name FROM adopters
        RIGHT JOIN dog_name ON adopters.name = dog_name.owner;

9.Write a query to find the name of the person who adopted Seashell given the tables Cats (depicted below),
Adoptions (depicted below), and Adopters which has columns for id, address, phone number, and name.
    Dogs table has the columns id, name, gender, age, weight, intake_date, breed, and in_foster.
    NOTE: Shelter dogs’ breeds are typically guessed by the intake team, so the column may have multiple words. I.E. labrador collie mix

    Cats table has the columns id, name, gender, age, intake_date, adoption_date
    Adoptions table has the columns id, adopter, cat, dog, fee, date

    SELECT adopter FROM Adoptions
    INNER JOIN dog ON adoptions.dog = dogs.name
    WHERE dogs.name = Seashell;



10.Given the tables Books (isbn, title, author), Transactions(id, checked_out_date, checked_in_date, user_id, isbn),
Holds(id, isbn, user_id, rank, date), and Patrons(id, name, fine_amount), write queries to find the following information:
    To discern if the library should buy more copies of a given book, please provide the names and position,
    in order, of all of the patrons waiting in line for Harry Potter and the Sorcerer’s Stone.

        SELECT user_id, rank FROM Holds
        INNER JOIN patrons ON holds.user_id = patrons.id
        ORDER BY holds.rank;

    Make a list of all book titles and denote whether or not a copy of that book is checked out.

        SELECT title FROM books
        RIGHT JOIN Transactions.checked_in_date
        ON Transactions.isbn = books.isbn;

    In an effort to learn which books take longer to read, the librarians would like you to create a list of
    total checked out time by book name in the past month.

        SELECT title FROM Books
        INNER JOIN (Transactions.checked_out_date - Transactions.checked_in_date)
        ON Transactions.isbn = books.isbn
        WHERE Transactions.checked_out_date > 12/22/2017;


    In order to learn which items should be retired, make a list of all books that have not been checked out in the past 5 years.

      SELECT isbn FROM Transactions
      WHERE checked_out_date < 1/22/2013;

    List all of the library patrons. If they have one or more books checked out, correspond the books to the patrons.

      SELECT * FROM Patrons
      LEFT OUTER JOIN Transactions.isbn
      ON Transactions.user_id = patrons.id;
